var variables are functioned scoped, so putting declaring a new var variable inside of an if statement doesn't mean that the variable is scoped inside of the statement, it is
available inside the function scope, not just the block scope (if statement). To overcome this, use a let variable because a let variable doesn't leak out of block scope - same
with a const variable. So const and let are block scoped, var is function scoped.
You cannot redeclare a let/const variable but can a var variable. 
Difference between let and const variables - let can be updated but const cannot be. 
Interesting code - 
	let winner = false;
	if (points > 40) {
		let winner = true;
	}
What do you expect winner to be? It will be false... but why? The two let winner variables are two separate variables but are scoped differently. If winner was chaned to var, it
would change.
Properties of a const varibale can be changed but not the object - the attributes can change, e.g., const person = {name: 'Nick', age: 27}; person cannot be changed but 
person.age can.
Something that is important to understand - IIFE (Immediately-Invoked Function Expression): Is a function that runs itself immediately and it sort of creates a scope where
 nothing is going to leak into the parent scope (function() {})();
If you use a const variable, for instance, you can use { const name = 'Nick' } and that will fix the same problem that IIFE solves, nothing leaks out to parent scope becuase
const variables are block scoped. 
Another example is for loops. If we have something like for(var i = 0; i < 10; i++) { console.log(i); setTime(function() { console.log('The number is ' + i);},1000);} - the output
will be 0 - 1 but the then output 'The number is 10'. console.log(i) will run with every variable but after one second, the for loop will run and i is being overwritten every time.
By thte time setTimeout runs (the first time) i will be 10. 
A way to fix this is to use let instead of var. let is block scoped so now we will see 'The number is x' for each i. 
The Temporal Dead Zone (TDZ) - if you have somehting like console.log(pizza); var pizza = 'Deep Dish';, you will get undefined. if you have const or let, you will get a 
ReferenceError that it is not defined. The TDZ - you cannot access a variable before it is defined. 

